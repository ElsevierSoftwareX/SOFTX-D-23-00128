head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2001.09.14.20.13.16;	author tiede;	state Exp;
branches;
next	1.5;

1.5
date	98.06.09.00.35.50;	author krishna;	state Exp;
branches;
next	1.4;

1.4
date	98.06.06.22.51.22;	author krishna;	state Exp;
branches;
next	1.3;

1.3
date	98.04.15.21.45.57;	author krishna;	state Exp;
branches;
next	1.2;

1.2
date	98.02.03.08.08.40;	author krishna;	state Exp;
branches;
next	1.1;

1.1
date	98.02.03.00.35.13;	author krishna;	state Exp;
branches;
next	;


desc
@@


1.6
log
@clear sample accumulator initially (sample overrun fix)
@
text
@/*
 * $Log: concat.c,v $
 * Revision 1.5  1998/06/09 00:35:50  krishna
 * Changed argument processing based on changes to functions in
 * getargs.c.  Rewrote usage, and added a print statement about which
 * file was being read in.
 *
 * Revision 1.4  1998/06/06 22:51:22  krishna
 * Added RCS log.
 *
 */

/*********************************************************************
 *
 *                             CONCAT.C
 *
 * Read in (at least) two waveform files, concatenate them, and 
 * write to output file.
 *
 * EDIT HISTORY:
 * 1.0 2-Jan-85, DK	Initial creation
 * 1.1 4/94, DH(?), edited to use getWavWaveform -- this used to use in
 * modules the kl library, .wav produced with with the old version of 
 * concat have a 504 byte header instead of the expected 512.
 * 1.2 10/30/97 KKG  Cleaned up code...deleted unused variables, etc.
 * Included a check for the same sampling rates across input waveform
 * files.  Included function calls to functions in wave_util.c.
 * 1.3 4/15/98 KKG  Added check for existing output file, and increased 
 * MAXWAVEFORMS to 100.
 *
 *********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wavio.h"
#include "getargs.h"

/*
 *  Prototypes
 */

int main(int argc, char **argv);
void usage(char *name);
void freeWaves(short **wavlist, int nwaves);


/*
 * Globals
 */

#define MAXWAVEFORMS 100

/***********************************************************************
 *                              MAIN
 ***********************************************************************/

int main(int argc, char **argv)
{
  FILE *fp;                     /* Output file pointer */
  char fname[500];              /* Temporary storage of filename */
  short *wavlist[MAXWAVEFORMS];   /* Pointers to all waveform data */
  short *data;                  /* Temp pointer to data */
  int nwtot[MAXWAVEFORMS];	/* # of samples in each waveform */
  int numWaves;		        /* Number of current waveform file */
  float curRate, samplingRate;  /* sampling rates */
  int i, nw;                    /* Counter */
  char progName[256];           /* Current program name */
  char *str;
  char answer[100];
   
  strcpy(progName, argv[0]); /* Program name */

  /*
   * Check for help
   */

  if (IsArg("-h", &argc, argv) || IsArg("-H", &argc, argv) || 
      IsArg("-help", &argc, argv) || IsArg("--help", &argc, argv) ||
      IsArg("-?", &argc, argv))
    usage(progName);

  if ((str = RemainingArgs(argc, argv)) != NULL) {
    fprintf(stderr, "Unknown or duplicate argument: %s\n", str);
    usage(progName);
  }
  if (argc < 4) usage(progName); /* Must be at least 3 args */

  numWaves = -1;
  for (i = 1; i < argc; i++) {  /* Main loop over args. */

    strcpy(fname, argv[i]);
    numWaves++;

    /*
     * Check if we are overflowing our buffers.
     */

    if (numWaves == MAXWAVEFORMS - 1) {
      fprintf(stderr, 
	      "\tError: Program can't take more than %d input waveforms.\n", 
	      MAXWAVEFORMS - 1);
      usage(progName);
    }

    /* 
     * If not last argument, read and load the waveform
     */

    if (i < argc - 1) {
      wavlist[numWaves] = getWavWaveform(fname, &curRate, 
					 &(nwtot[numWaves]), SWAP);

      fprintf(stdout, "Reading %s (SR = %.0f Hz; %d samples)...\n", fname, curRate, nwtot[numWaves]);
      if (wavlist[numWaves] == NULL) {
	  fprintf(stderr, "Error: Could not read waveform %s.\n", fname);
	  fprintf(stderr, "**** SKIPING FILE %s in concat\n");
	  free(wavlist[numWaves]);
	  wavlist[numWaves] == NULL;
      }

      /*
       * First waveform sets Master sampling rate.  Otherwise, check 
       * verify sampling rate is same as Master.
       */

      if (i == 1) samplingRate = curRate;  
      else if (samplingRate != curRate) {
	fprintf(stderr, 
		"Error: Sampling rate for %s isn't same as other files.\n", 
		fname);
	fprintf(stderr, "**** SKIPING FILE %s ****\n", fname);
	free(wavlist[numWaves]);
	wavlist[numWaves] == NULL;
      }
    }
    else {

    /* 
     * The last arg. So, write out concatenated wavefiles. First, 
     * check if output file exists.
     */

      checkWavName(fname);

      /* Now write out the output file */

      if (openWav(fname, &fp, WRITE) == ERROR) {
	fprintf(stderr, "Error: Problem opening the output wave file %s.\n", 
		fname);
	freeWaves(wavlist, numWaves);
	exit(-1);
      }
      nwtot[numWaves] = 0;   // samp overrun bugfix
      for (nw = 0; nw < numWaves; nw++) nwtot[numWaves] += nwtot[nw];

      if (writeWavHeader(fp, (int) samplingRate, 
			 nwtot[numWaves], SWAP) == ERROR) {
	fprintf(stderr, 
		"Error: Problem writing header to output wave file %s.\n", 
		fname);
	freeWaves(wavlist, numWaves);
	exit(-1);
      }

      for (nw = 0; nw < numWaves; nw++) {
	data = (short *) wavlist[nw];
	if (writeWav(fp, data, nwtot[nw], SWAP) == ERROR) {
	  fprintf(stderr,
		  "Error: Problem writing header to output wave file %s.\n", 
		  fname);
	  freeWaves(wavlist, numWaves);
	  exit(-1);
	}
      }
      closeWav(fp);
      fprintf(stderr, 
	      "\nConcatenated waveform saved in %s (%d samples at %d Hz).\n\n",
	      fname, nwtot[numWaves], (int) samplingRate);
    }
  }
}

void freeWaves(short **wavlist, int nwaves) {
  register int nw;

  for (nw = 0; nw < nwaves; nw++) 
    if (wavlist[nw] != NULL) free(wavlist[nw]);
}

/***********************************************************************
 *                              Usage()
 ***********************************************************************/

void usage(char *name)
{
  fprintf(stderr, "\nUsage: %s [-h | --help] <wav1> <wav2> [<wav3> ...] <Outfile>\n", name);
  fprintf(stderr, "\t<wav1>, <wav2>, <wav3> are the input, Klatt .wav files\n");
  fprintf(stderr, "\t\tto be concatenated.\n");
  fprintf(stderr, "\tFiles must have the same sampling rate. If a file\n");
  fprintf(stderr, "\t\thas a different sampling rate it is excluded.\n");
  fprintf(stderr, "\t<Outfile> is the output waveform file.\n");
  fprintf(stderr, "\tThe .wav extension is optional for all filenames.\n");
  fprintf(stderr, "e.g., %s ba li bali\n", name);
  exit(1);
}

@


1.5
log
@Changed argument processing based on changes to functions in
getargs.c.  Rewrote usage, and added a print statement about which
file was being read in.
@
text
@d3 5
d43 1
a43 1
void main(int argc, char **argv);
d58 1
a58 1
void main(int argc, char **argv)
d114 1
a114 1
      fprintf(stdout, "Reading %s (SR = %.0f Hz)...\n", fname, curRate);
d154 1
@


1.4
log
@Added RCS log.
@
text
@d2 4
a5 1
 * $Log$
d32 1
d64 1
d73 3
a75 3
  if (IsArg("-h", argc, argv) || IsArg("-H", argc, argv) || 
      IsArg("-help", argc, argv) || IsArg("--help", argc, argv) ||
      IsArg("-?", argc, argv))
d78 4
d109 1
d127 1
a127 1
	fprintf(stderr, "**** SKIPING FILE %s in concat\n");
d191 4
a194 4
  fprintf(stderr, "\nUsage: %s [-h | --help] <Infile1> <Infile2> [<Infile3> ...] <Outfile>\n", name);
  fprintf(stderr, "\t<Infile1> and <Infile2> are the first names of the first two input\n");
  fprintf(stderr, "\t\tfiles to be concatenated.\n");
  fprintf(stderr, "\t\tFiles must have the same sampling rate. If a file\n");
d196 2
a197 1
  fprintf(stderr, "\t<Outfile> is the first name of the output waveform file.\n");
@


1.3
log
@Added check for accidental overwrite of output file (checkWavName).
Added skipping of files if they can't be read or have a different
sampling rate.  Added freeing of memory if an error occurs.
@
text
@d1 4
@


1.2
log
@Modified usage.  Included getargs.
@
text
@d16 2
a17 1
 * 
d24 1
a24 1
#include "waveio.h"
d32 2
d39 1
a39 1
#define MAXWAVEFORMS 10
d49 1
a49 1
  short *bwave[MAXWAVEFORMS];   /* Pointers to all waveform data */
d52 1
a52 1
  int nwave;		        /* Number of current waveform file */
d55 4
a58 1
  char progName[256];
d60 3
a62 2
   
  strcpy(progName, argv[0]);
d71 2
a72 3
  /*
   * Main loop over args.
   */
a73 2
  nwave = -1;
  for (i = 1; i < argc; i++) {
d75 1
a75 1
    nwave++;
d81 3
a83 2
    if (nwave == MAXWAVEFORMS - 1) {
      fprintf(stderr, "\tError: Program can't take more than %d input waveforms.\n", 
d89 1
a89 2
     * If not last argument, read and load the waveform, and verify
     * sampling rates are same across wave files 
d93 9
a101 1
      bwave[nwave] = getWavWaveform(fname, &curRate, &(nwtot[nwave]), SWAP);
d103 6
a108 1
      if (i == 1) samplingRate = curRate;
d110 6
a115 3
	  printf("Error: Sampling rate for %s isn't same as other input files.\n", 
		 fname);
	  exit(1);
d118 1
d121 2
a122 1
     * If it is the last arg, then write out concatenated wavefiles.
d125 30
a154 8
    else {
      openWav(fname, &fp, WRITE);
      for (nw = 0; nw < nwave; nw++) nwtot[nwave] += nwtot[nw];
      writeWavHeader(fp, (int) samplingRate, nwtot[nwave], SWAP);

      for (nw = 0; nw < nwave; nw++) {
	data = (short *) bwave[nw];
	writeWav(fp, data, nwtot[nw], SWAP);
d157 3
a159 2
      printf("\nConcatenated waveform saved in file %s (%d samples at %d Hz).\n\n", 
	     fname, nwtot[nwave], (int) samplingRate);
d162 7
a168 2
  for (nw = 0; nw < nwave; nw++) 
    if (bwave[nw] != NULL) free(bwave[nw]);
d177 1
a177 1
  fprintf(stderr, "\nUsage: %s [-h | --help] <Infile1> <Infile2> [<Infile3> ... <Infile9>] <Outfile>\n", name);
d179 3
a181 2
  fprintf(stderr, "\t\tfiles to be concatenated. There can be a max of 9 input\n");
  fprintf(stderr, "\t\tfiles.  Files must have the same sampling rate.\n");
@


1.1
log
@Initial revision
@
text
@a7 3
 * COMPILATION:
 * cc concat94.c xwave_util.c -o concat
 *
a16 3
 * For future:
 * Rewrite code to write out data on fly, and overcome limitations of
 * number of input files.
d30 1
a30 1
void usage(char **argv);
a37 2
char versionStr[] = { "version 1.2: 10/30/97" };

d52 1
d54 2
a55 1
  printf("\n%s (%s)\n", argv[0], versionStr);   /* Print version number */
d57 4
a60 4
  if (argc <= 3) usage(argv); /* Must be at least 3 args */
  /* 
   * Check for help or ?
   */
d62 1
a62 4
  for (i = 1; i < argc; i++) {
     if ((strcmp(argv[i], "-h") == 0) ||  (strcmp(argv[i], "-H") == 0)  ||
     (strcmp(argv[i], "-?") == 0) || (argv[i][0] == '?')) usage(argv);
  }
d79 2
a80 2
	      MAXWAVEFORMS);
      usage(argv);
d88 1
a88 1
    if (i < argc-1) {
d93 1
a93 1
	  printf("Error: Sampling rate for %s isn't same as other files.\n", 
d113 1
a113 1
      printf("\nConcatenated waveforms saved in file %s (%d samples at %d Hz).\n", 
d125 1
a125 1
void usage(char **argv)
d127 6
a132 8
  printf("\nUsage:  %s <Infile1> <Infile2> [<Infile3> ... <Infile9>] <Outfile>\n",
	 argv[0]);
  printf("\nFiles must have the same sampling rate.\n");
  printf("\nRequired arguments for CONCAT:\n");
  printf("\tInfile1 and Infile2 are the first names of the first two input\n");
  printf("\tfiles to be concatenated. There can be a total of 9 input files.\n");
  printf("\n\tOutfile is the first name of the output waveform file.\n");
  printf("\nExample:\n\n\tprompt> concat ba li bali\n\n");
@

head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2002.06.13.15.15.20;	author tiede;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.25.00.56.04;	author tiede;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.14.20.31.09;	author tiede;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.02.21.07.25;	author xkldev;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.15.20.21.30;	author tiede;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.24.20.20.27;	author tiede;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.08.03.23.29;	author tiede;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.08.03.07.22;	author tiede;	state Exp;
branches;
next	1.6;

1.6
date	99.05.20.19.51.02;	author vkapur;	state Exp;
branches;
next	1.5;

1.5
date	99.02.18.22.29.51;	author vkapur;	state Exp;
branches;
next	1.4;

1.4
date	98.07.17.08.07.22;	author krishna;	state Exp;
branches;
next	1.3;

1.3
date	98.04.15.21.57.42;	author krishna;	state Exp;
branches;
next	1.2;

1.2
date	98.04.15.17.59.15;	author krishna;	state Exp;
branches;
next	1.1;

1.1
date	98.02.03.00.45.14;	author krishna;	state Exp;
branches;
next	;


desc
@@


1.14
log
@mods for labelling, 4096 FFT
@
text
@/*
 * $Log: xspec_util.h,v $
 * Revision 1.11  2000-11-02 16:07:25-05  xkldev
 * menu selection fixes (version bump)
 *
 * Revision 1.10  2000/09/15 20:21:30  tiede
 * spectrogram now displayed correctly regardless of screen depth
 * mods to support LEX *.label files
 *
 * Revision 1.9  2000/08/24 20:20:27  tiede
 * added LABEL support
 *
 * Revision 1.7  2000/06/08 03:07:22  tiede
 * change ShowDocDialog prototype to (char *)
 *
 * Revision 1.6  1999/05/20 19:51:02  vkapur
 * added/reorganized function declarations
 *
 * Revision 1.5  1999/02/18 22:29:51  vkapur
 * changed procedure declarations to be explicit
 *   i.e., declare arguments and types explicitly
 *
 * Revision 1.4  1998/07/17 08:07:22  krishna
 * Added RCS header, and added some prototypes, etc.
 * */

#ifndef XSPEC_UTIL_H
#define XSPEC_UTIL_H

#include <stdio.h>
#include <stdlib.h>
#include "xinfo.h"
#include "wavio.h"
#include "help.h"
#include "version.h"

#define DIR_LENGTH 600           /* Length in chars of current directory */

/* Current working directory */

extern XmString current_dir; /* store last directory to look in */


/*
 * Some globals used for the spectrum graphics.
 */

#define SPEC_OX .1
#define SPEC_XR .75
#define SPEC_DB 80.0

/* 
 * Spectrum params array indices. See xkl.c.
 */

#define WC 0
#define WD 1
#define WS 2
#define WL 3
#define NC 4
#define FD 5
#define B0 6
#define B1 7
#define BS 8
#define F1 9
#define F2 10
#define FL 11
#define SG 12
#define NW 13
#define SD 14
#define KN 15

#define numSpecParams 16

/* 
 * Postscript types
 */

#define PSNONE -1
#define FULLPAGE 0
#define FOURPAGE 1

extern FILE *PS4_fp;
extern FILE *PSfull_fp;
extern int quadcount;    /* Spectrum counter for 4/pg postscript */

/*
 * Misc globals
 */


#define NUM_WINDOWS 4     /* Number of windows for each waveform */
#define GRAM       2      /* index of spectrogam */
#define SPECTRUM   3      /* index of drawing widget for spectrum */

extern int lock;                 /* specifies if wave files are locked */

extern char curdir[DIR_LENGTH];  /* current working directory */

#define MELFAC 2595.0375  /* = 1000./log10(1. + 1000. / 700. ) */

#define MINSIZE  450  /* minimum width of window for menu_bar*/

#define AVGLIMIT 100 /* max number of spectra used in 'A' */

#define NPMAX 32000
#define NFMAX  257
#define SIZCBSKIRT 200
extern float cbskrt[200];

extern char cmdstr[800];

typedef struct PARAM {
   int min;
   int max;
   int index; /* position on selection box list = index of spectro->params[] */
} PARAM;

/* Parameter structure */

typedef struct {
   int type;     /* int or float */
   char *key;    /* key to type */
   float min;    /* minimum value */
   float max;    /* maximum value */
   float value;  /* current value */
   char *desc;   /* Description   */
} paramStruct;

enum {FLOAT, INT};



extern PARAM sb_param;  

#define XAM(a,b)    (((a) > (b)) ? (a) : (b)) /* for dft library */


/*  LABEL structure:  null-terminated linked list */

#define MAXLABLEN 11         // max displayed label text length plus terminator (ASCIIZ)
#define MAXLABCOM 31		 // max displayed label text length plus terminator (ASCIIZ)
typedef struct LABEL {
  float  offset;              // offset in msecs from start of file
  char   name[MAXLABLEN];     // displayed text
  char	 comment[MAXLABCOM];  // optional comment
  struct LABEL *next;         // next label
} LABEL;
  

/* 
 * The spectro stucture has been modified to accomodate the XKL
 * program.  The structure has all the information needed to draw the
 * two waveform windows, the spectrum window and the spectrogram
 * window. The stucture stores the information about each drawing area
 * widget used in an array of "INFO" stuctures: info[0] has
 * information about the spectrum, info[1] the large waveform window,
 * info[2] the small waveform window and info[3] has information about
 * the spectrogram drawing area widget
 */

typedef struct XSPECTRO{
/*******************things from quickspec ****************/
        int type_spec;               /* flag for type of spectrum */

        char option;                 /* which combination of spectra
                                        are displayed*/
        char savoption;              /* used to store mode when
                                        doing a, A or k averaging*/
        int history;                 /* whether the last spectrum
                                        is displayed */
        float histime;               /* time of .spectrum file*/



         int oldsizwin, oldwintype;/* does a new hamming window need
                                      to be calculated */
	 int sizfft;		/*Set here, max{usersizfft, sizwin} */

	 int sizwin,savsizwin;	/* # pts in time weighting window    */

	 int nsdftmag;		/* Set in KLSPEC */

/* Lock function */

	int locked;

/*    Arrays from MAKEFBANK.C */

/* Defines shape of pseudo-Gaus filt */
        float cbskrt[SIZCBSKIRT];
        int nfr[4096];	        /* Center freq (Hz) of output filters */
        int savnfr[4096];	/* Center freq (Hz) of output filters */

	short nbw[NFMAX];	/* Bandwidths (Hz) of output filters */
	short pweight[NPMAX];	/* Weights of indiv. filter coefs    */
	int sizcbskirt;		/* # pts in cbskrt[]		     */
        int nchan;		/* cb		     */
        short nstart[NFMAX],ntot[NFMAX]; /*First sample contributing to filt*/
	int logoffset;
	float attenpersamp;


/*    From GETFORM.C */

	int dfltr[257];			/* Spectral slope */

#define MAX_INDEX	7
	int nforfreq;			/* number of formant freqs found   */
	int forfreq[16],foramp[16];	/* nchan and ampl of max in fltr[] */
	int valleyfreq[8],valleyamp[8];	/* nchan and ampl of min in fltr[] */

	int nmax_in_d;			/* number of maxima in deriv       */
	int ncdmax[8],ampdmax[8];	/* nchan and ampl of max in deriv  */
	int ncdmin[8],ampdmin[8];	/* nchan and ampl of min in deriv  */

	int hftot;			/* number of hidden formants found */
	int hiddenf[8],hiddena[8];	/* freq and ampl of hidden formant */



/* spectrum stuff */

        float hamm[4096];
        float dftmag[4096];
        int fltr[4098]; /* spectrum */ /* store RMS in last element */
	int savfltr[4098]; /* last spectrum or dft depending on mode */   
        int lenfltr,lensavfltr;
        int fd,savfd; /* spectrum,
                       save the first difference value for c and s */
        int spectrum,savspectrum; /*flag for whether to draw fltr
                                       and savfltr*/
        int savclip; /* in case savfltr needs to be clipped(8k on 5k) */
        float xfltr[2048],yfltr[2048],xsav[2048],ysav[2048];  /* postscript
                                          version of fltr and savfltr */ 
        int nxxmin,nxxmax;   /* used for 'a' and 'k' 
                                start and stop in msec*/
        int avgtimes[AVGLIMIT];    /* array of spectra centers
                               for 'A' in msec*/
        int avgcount;        /* how many spectra in 'A'*/
	double denergy;


int params[16];            /* wc,wd,ws..etc. */

float hamm_in_ms[4];     /* store sizwin in ms, convert to samples
                         in setparam and store in params[0-4]*/

/***********************spectrogram stuff****************/

Dimension menu_height;               /*used for sizing gram toplevel*/

int spectrogram;                     /* spectrogram flag whether or not 
                                       spectrogram widget is managed*/
int param_active;                    /* is the spectrum paramter selection
                                        box active for this widget */
int segmode;                         /* whether w to e or the waveform
                                       displayed in the window is played */
short *startplay;                    /* used for playing or writing section 
                                        of waveform*/
long sampsplay;                      /* number of samples in section
                                        that is played*/
int swap;                            /* if running on sgi swap bytes 
                                       in .wav*/
XImage *xim;                         /* ximage of entire spectrogram*/

char *pix;                           /* data for xim */

float *allmag;                       /* dft temporary storage*/ 

int xpix,ypix;                       /* scale factor in x and y */

int devwidth, devheight;             /* device width and height  */

Dimension ox[4],oy[4];               /* device coord of window origins */

Dimension cmdox,cmdoy;               /* device coord of cmd window origin*/

int wxmax,wymax;                     /*spectrogram size  */

int numcol;                          /* shades of grey + white */

float cinc;                          /* change of intensity
                                        between shades*/
int tickspace;                       /*spacing so tick marks
                                         don't have to be redrawn*/
int axisdist,wchar,hchar;            /*axis offset from spectrogram,
                                        character height and width   */
Dimension xr[4],yb[4];               /*window boundaries */

Dimension cmdxr,cmdyb;               /*boundaries of command window*/

int sec;                             /* seconds or milliseconds flag*/

Widget fbw_text;                   /* scrolled text window for displaying
                                        freq + bw */
Widget draww[4];                         /* the drawing area widget
                                         where the spectrogram is drawn*/
int xgram;                           /* total of pixels in x
                                         stored in .gram file*/
INFO *info[4];                           /*information used for draw in
                                        X, gc etc.*/
Widget *buttons[6];                    /* all the buttons on the menus
                                         allocated in create menus*/
Widget toplevel[4],mainw[4],menu_bar[4];  /* things to make a toplevel
                                        shell for each spectrogram*/ 
int   normstate[4];                    /* state of toplevel windows
                                         1 = normal, 0 = icon*/
char  *allgvs;                          /* all the grey indices */

int  *posti, postcount;                  /*postsript and rle stuff*/

int ps_window;                           /*which window is requesting
                                           postscript output*/
int quadcount;                            /* used for putting 4
                                          spectra on a page */ 
float gscale;                            /*postscript font scale*/

float Gscale;                            /* postscript font scale
                                            4 spectra/page*/
int wwav;                                /* (segtowav)write .. 1:play seg
                                           2:record  3:syn*/
int donew;                               /* display recorded file in
                                          current display or new one*/
float maxmag,minmag;                     /* minmag maps to white,
                                            maxmag maps to darkest gray */
short *iwave;                            /*totsamp samples must convert
                                            (float)(iwave[p]>>4)*/
int totsamp;                             /*total number of 
                                             samples in iwave file */
int  slice;                              /*length of each FFT snapshot, 
                                             default 64 samples*/
float winms;                             /*window in msec
                                            winsamps*1000/spers */
float savewinms;                         /* save for file swaps */

int winsamps;                            /*number of samples padded
                                         with 0's if needed passed to fft*/
int numav;                               /*number of FFTs to 
                                            average*/
int sdelta;                              /* number of new samples in each
                                            spectra*/
float msdelta;                           /*number of new ms in each
                                            spectrum*/
float savemsdelta;                       /* save for file swaps*/

float specms;                            /*suggested number of ms in
                                              spectrogram*/
int ovlap;                               /*amount of overlap between 
                                            each FFT*/
int insize;                              /*number of samples in wav file 
                                            doesn't have to be power of 2*/
int specsize;                            /*number of samples in display 
                                            doesn't have to be power of 2*/
int sampsused[3];                          /* the number of samples actually
                                          displayed in window*/
int  estsize;                            /*(slice-ovlap)*(numav-1)
                                              + slice*/
int numests;                             /* insize/estsize (totsamp)*/

int xmaxests;                            /* number of estimates in window*/

float  spers;                             /* samples per second 
                                             used in wave file*/
float savspers;                          /* samples per second
                                            in .fltr file */
int startmarker, endmarker;             /* sample indices(same for all
                                          windows*/
int oldstart, oldend;                   /* used to erase markers*/

float startime[3];                          /*starting time of window
                                                         in msec*/
float timeoffset;                            /* used in lock function: offset
					    relative to locked waveform */

int startindex[3];                        /*starting index of data in 
					   window*/
int t0;                                 /*time offset in image coord(spectra)*/

char fname[200];                          /* preferrence dat file name */

char wavename[200];                       /* waveform name */

char savname[200];                       /* name of wavform for
                                          read and write spectrum*/
char wavefile[200];                       /* directory and file name */

char segname[200];                       /* new file name for seg,
                                             syn and record  */
char grampath[200];                     /* directory for .gram file*/

char synDefPath[200];                 /* synthesis defaults directory (path to executable) */

int fdifcoef;                         /* first difference coefficient
                                         between 0 and 100 (spectrogram)*/ 
float wavemin, wavemax;               /* waveform min and max value */

int step;                             /* waveform increment */

int spratio;                        /* aspect ratio of freq to ms*/

float wvfactor[2];                       /*for zooming in on waveform*/

float savetime,oldtime;            /*time from beginning of file
                                  in ms where middle mouse is clicked*/

int saveindex,oldindex;                /* index from beginning of file
                                   where left mouse is clicked(all windows)*/

int specfreq, savspecfreq;         /* freq val at cursor location in 
                                      spectrum window  */

int spec_cursor;                  /* position of cursor in spectrum*/

float savspecamp, specamp;         /* amp val at cursor location in 
                                      spectrum window  */

int defserr;                       /* inappropriate value in defs.dat */

char tmp_name[500];               /*storage for a file name used for
                                    overwrite popup */

int localtimemax;		 /* shall we lock onto local max in time? EC*/

int localfreqmax;		 /* shall we lock onto local max in freq? EC*/

int clickedWinIndex;		/* index of clicked window */
float clickedWinTime;			/* offset (msecs) at mouseDn */

LABEL *labels;                   /* label list */

} XSPECTRO;


typedef struct {
  float real;
  float imag;
} COMPLEX;

typedef struct ALLSPECTROS {
  XSPECTRO **list;
  int count;
} ALLSPECTROS;

extern ALLSPECTROS allspectros;       /* global list of all waves */

/* 
 * Widgets that everybody shares 
 */

extern Widget warning; 
extern Widget help_dialog;
extern Widget param_sb, param_tl;
extern Widget *param_buttons;
extern Widget param_menu;
extern Widget input_dialog; 
extern Widget filesb_dialog;
extern Widget cmdw, cmdtextw;
extern Widget application; 

/***********************************************************************
 *
 *                   FUNCTION DEFINITIONS
 *
 ***********************************************************************/

/* 
 * Functions in xkl.c 
 */

void setms();
void writedata();
void dowritedata();


/**** New function definitions for xkl.c *****/

void raiseinput (Widget, XtPointer, XtPointer);
void raisewav(XSPECTRO *);
void dobutton(Widget,XtPointer, XtPointer);         /* button click stuff*/
void HandleFileMenu(Widget,XtPointer, XtPointer);
void setfilesb(XSPECTRO *);
void writetext(char *);               /* write a line of text to text window */
void writewe(XSPECTRO *);
void writcurpos(XSPECTRO *);
void HandleTimeMenu(Widget, XtPointer, XtPointer);
void HandleHelpMenu(Widget, XtPointer, XtPointer);
void HandleAudioMenu(Widget,XtPointer, XtPointer);
void HandleParamMenu(Widget,XtPointer, XtPointer);
void HandleRecMenu(Widget,XtPointer, XtPointer);
void HandleSpectrumMenu(Widget,XtPointer, XtPointer);
void HandleWavlistMenu(Widget,XtPointer, XtPointer);
Widget CreateOneMenu (Widget, char *, char **, int, Widget *, Boolean, int);         /* menupane */
void CreateMenus (Widget, XSPECTRO *, Widget **, Widget *, int);           /* menubar  */
void CreateHelpDialog(Widget);
void CreateHelpText(Widget);
void createtext(Widget, Widget *);
void doresize(Widget,XtPointer, XtPointer);      /* resize window */
void spurious (INFO *, Dimension, Dimension);    /* deal with extraneous resize events */
int resizegram(XSPECTRO *);
void dorec(Widget, XtPointer, XtPointer);
void doparam(Widget, XtPointer, XtPointer);
void doparamsAll(Widget, XtPointer, XtPointer);
void inputrec(int);
void writeParam(paramStruct, char *);
void listrec();
void dolist (XSPECTRO *);
void setrec(Widget, XtPointer, XtPointer);
void setparam(Widget, XtPointer, XtPointer);
void donerec(Widget, XtPointer, XtPointer);
void doneparam(Widget, XtPointer, XtPointer);
void CreateRecDialog(Widget);
void CreateParamDialog(Widget);
void CreateWavList(Widget);
void dowavlist();
void dowav(Widget, XtPointer, XtPointer);
void FindWav(XSPECTRO *, int);
void shiftCurrentWav(XSPECTRO *, int);
void cancelwavlist(Widget, XtPointer, XtPointer);
void CreateInputDialog(Widget);
void CreateFileSB(Widget);
void CreateWarning(Widget);
void CreateOops(Widget);
void wavgram(int, int *, char **, int);
void xklPlay(XSPECTRO *, int);
void xklRecord(XSPECTRO *);
void do_usage();
void doraise(Widget, XtPointer, XVisibilityEvent *, Boolean *); /* if input dialog is obscured raise it */
void undomap(XEvent *);
void domap(XEvent *);                      /* set flag when window is iconified */                    
void dopsfile(Widget, XtPointer, XtPointer);   /* get postscript file name */
void dooverwriteps(Widget, XtPointer, XtPointer);
void openps(XSPECTRO *);                    /* get postscript file name */  
void activateMenuItem(XSPECTRO *, char);
void deActivateMenuItem(XSPECTRO *, char);
void writeps(XSPECTRO *, FILE *);
void avgval(Widget, XtPointer, XtPointer);  /* get input for 'A' averaging */
void cancelavg(Widget, XtPointer, XtPointer);
void doneavg(Widget, XtPointer, XtPointer);
void aval(Widget, XtPointer, XtPointer);    /* get input for 'a' averaging */
void readparams(Widget, XtPointer, XtPointer);  /* read a spectrum ,params file */
void writeparams(Widget, XtPointer, XtPointer);
void dowriteparams(Widget, XtPointer, XtPointer);
void cancelfilesb(Widget, XtPointer, XtPointer);
void cancelinput(Widget, XtPointer, XtPointer);
void cancelwarning(Widget, XtPointer, XtPointer);
void showvalues (XSPECTRO *);              /* show spectrum valules in help type window*/
void setwvfact(Widget, XtPointer, XtPointer);
void segtowav(Widget, XtPointer, XtPointer);
void writewarn(Widget, XtPointer, XtPointer);
int doreplace (XSPECTRO *);
void recstart(XSPECTRO *, int);
void recquery (XSPECTRO *);
void recswap(Widget, XtPointer, XtPointer);
void doswap(Widget, XtPointer, XtPointer);
void recnew(Widget, XtPointer, XtPointer);
void cancelrec(Widget, XtPointer, XtPointer);
void opendialog (Widget);
void open_tl_dialog (Widget);
void exitwarning();
void doexit();
void ShowOops (char *);
void closefullps(Widget, XtPointer, XtPointer);  /* close fullpage postscript file */
void close4ps(Widget, XtPointer, XtPointer);     /* close 4/page postscript file*/
void closejnl();
void openjnl(Widget, XtPointer, XtPointer);
void dooverwritejnl(Widget, XtPointer, XtPointer);

/* Synthesis */
void HandleSynthesizeMenu(Widget, XtPointer, XtPointer);
void HandleSynMenu(Widget, XtPointer, XtPointer);
void dosyn(Widget, XtPointer, XtPointer);
void inputsyn (XSPECTRO *, int);
void synpar(Widget, XtPointer, XtPointer);
void CreateSynDialog (Widget);
void donesyn(Widget, XtPointer, XtPointer);
void synps(Widget, XtPointer, XtPointer);
void writesynps();
void dowritesynps(Widget, XtPointer, XtPointer);
void printsyn (char *);
// void writedoc(Widget, XtPointer, XtPointer);
void writedoc(char *);
void warndoc(Widget, XtPointer, XtPointer);
void syndef(Widget, XtPointer, XtPointer);
void syndoc(Widget,XtPointer, XtPointer);
void rdoc(Widget,XtPointer, XtPointer);
void showdoc();
void showvaried();
void drawsyn (FILE *);
void syn_pixmap();
void resizesyn(Widget, XtPointer, XtPointer);
void expsyn(Widget, XtPointer, XtPointer);
void inputparams (XSPECTRO *, int);
void vartime(Widget, XtPointer, XtPointer);
void setvar(Widget, XtPointer, XtPointer);
void setcon(Widget, XtPointer, XtPointer);
void ShowDocDialog(char *);

void HighlightInput (char *, Widget);
void CalculateOffset (float);
void timestep (XSPECTRO *, float);

/* Lock */
void SelectLocked();
void DoneLock (Widget, XtPointer, XtPointer);
void CancelLock (Widget, XtPointer, XtPointer);


/* 
 * xspec_util.c
 */

void spec_cursor(XSPECTRO *);
void expdraww();                /* draw just exposed*/
void postgvs();
int  readfreq();
void writefreq();
void startup();
void set_defaults();
int  read_data();
void add_spectro();
void spectro_pixmap();
void make_pixmap();
void win_size();
void findsdelta();
void findypix();
void calculate_spectra();
void draw_spectrogram();
void draw_cursor();
void draw_axes();
void findxryb();
void findtime();
void findminmaxtime();
void eraseline();
void erasechar();
void xline();
void gramoffset();
void remapgray();
void update();
void settime();
void settime_lock (Widget, XtPointer, XtPointer);
void swapwave();
void wave_stuff();
void canceltime();
void cancelswap();
void delete_wave();
void delete_spectro();
void createwindows();
void mapwindows();
void newwave();
void do_newwave();
void cancelnew();
void validindex();
void draw_hamm();
void swapstuff();
void LoadNewWaveform(XSPECTRO *, char *);

/* 
 * xklspec.c 
 */

void readspectrum();
void cancelread();
void writespectrum();
void dowritespectrum();
void cancelwrite();
void writegram();

/*
 * function prototypes for dft and inverse dft functions 
 */

void fft(COMPLEX *,int);
void ifft(COMPLEX *,int);
void spec_dft(COMPLEX *,COMPLEX *,int);
void idft(COMPLEX *,COMPLEX *,int);
void rfft(float *,COMPLEX *,int);
void ham(COMPLEX *,int);
void han(COMPLEX *,int);
void triang(COMPLEX *,int);
void black(COMPLEX *,int);
void harris(COMPLEX *,int);
int ilog2(unsigned int);

#endif /*XSPEC_UTIL_H*/
@


1.13
log
@writedoc() called directly (fix for syn overwrite bug)
@
text
@d73 2
d141 2
a142 1
#define MAXLABLEN 11         // max displayed label text length (ASCIIZ)
d144 4
a147 3
  float   offset;            // offset in msecs from start of file
  char    name[MAXLABLEN];   // displayed text
  struct LABEL *next;        // next label
d226 2
a227 2
        int fltr[514]; /* spectrum */ /* store RMS in last element */
	int savfltr[514]; /* last spectrum or dft depending on mode */   
d234 1
a234 1
        float xfltr[256],yfltr[256],xsav[256],ysav[256];  /* postscript
d427 3
a656 1
void lmfile();
@


1.12
log
@version now obtained via "version.h"
@
text
@d574 2
a575 1
void writedoc(Widget, XtPointer, XtPointer);
@


1.11
log
@menu selection fixes (version bump)
@
text
@d3 3
d35 1
a36 2
#define VERSION "2.81"   /* xkl version */
#define DATE "11/02/00"   /* Date released */
d387 2
@


1.10
log
@spectrogram now displayed correctly regardless of screen depth
mods to support LEX *.label files
@
text
@d3 4
d33 2
a34 2
#define VERSION "2.8"   /* xkl version */
#define DATE "09/15/00"   /* Date released */
@


1.9
log
@added LABEL support
@
text
@d3 3
d29 2
a30 2
#define VERSION "2.7"   /* xkl version */
#define DATE "08/24/00"   /* Date released */
@


1.8
log
@*** empty log message ***
@
text
@d1 2
a2 1
/* $Log: xspec_util.h,v $
d26 2
a27 2
#define VERSION "2.51"   /* xkl version */
#define DATE "06/07/00"   /* Date released */
d127 11
d411 3
d638 1
@


1.7
log
@change ShowDocDialog prototype to (char *)
@
text
@d2 3
d25 2
a26 2
#define VERSION "2.5"   /* xkl version */
#define DATE "2/17/99"   /* Date released */
@


1.6
log
@added/reorganized function declarations
@
text
@d2 3
d560 1
a560 1
void ShowDocDialog();
@


1.5
log
@changed procedure declarations to be explicit
  i.e., declare arguments and types explicitly
@
text
@d2 4
d19 2
a20 2
#define VERSION "2.4"   /* xkl version */
#define DATE "7/17/98"   /* Date released */
d153 4
d342 3
d560 7
d601 1
d616 1
a616 1
void newstuff();
@


1.4
log
@Added RCS header, and added some prototypes, etc.
@
text
@d1 4
a4 1
/* $Log$ */
d17 6
a75 1
#define DIR_LENGTH 600           /* Length in chars of current directory */
d97 15
d421 56
a476 10
void dobutton();           /* button click stuff*/
void doresize();           /* resize window */
void spurious();           /* deal with extraneous resize events */
void doparam();
void doparamsAll();
void doinput();
void dofile();
void raiseinput();
void writetext();          /* write a line of text to text window */
void wavgram();
d478 32
a509 50
void writcurpos();
void doraise();            /* if input dialog is obscured raise it */
void domap();              /* set flag when window is iconified */
void undomap();
void dopsfile();           /* get postscript file name */
void openps();             /* get postscript file name */
void closefullps();        /* close fullpage postscript file */
void close4ps();           /* close 4/page postscript file*/
void avgval();             /* get input for 'A' averaging */
void cancelavg();
void doneavg();
void aval();               /* get input for 'a' averaging */
void readparams();         /* read a spectrum ,params file */
void writeparams();
void cancelfilesb(); 
void cancelinput();
void showvalues();         /* show spectrum valules in help type window*/
void setwvfact();
void segtowav();
void writewarn();
void cancelwarning();
void recstart();
void recquery();
void recswap();
void doswap();
void recnew();
void cancelrec();
void donesyn();
void dosyn();
void inputsyn();
void syndef();
void syndoc();
void rdoc();
void showdoc();
void synpar();
void setcon();
void vartime();
void setvar();
void expsyn();
void resizesyn();
void synps();
void writesynps();
void dowritesynps();
void writedoc();
void warndoc();
void dowavlist();
void dowav();
void cancelwavlist();
void opendialog();
void open_tl_dialog();
d512 3
a514 6
void showoops();
void writeps();
void dooverwriteps();
void dowriteparams();
void openjnl();
void dooverwritejnl();
d516 2
a517 4
void createtext();
int findspecindex();
void spec_cursor();
void shiftCurrentWav();
d519 28
a546 41
/*
 *  MENU STUFF  
 */

void CreateMenus();                  /* menubar  */
Widget CreateOneMenu();              /* menupane */

void HandleFileMenu();
void HandleTimeMenu();
void HandleSpectrumMenu();
void HandleAudioMenu();
void HandleSynthesizeMenu();
void HandlePrintMenu();
void HandleHelpMenu();
void HandleParamMenu();
void HandleSynMenu();
void HandleRecMenu();

void CreateRecDialog(Widget parent);
void CreateHelpText();
void CreateHelpDialog();
void CreateSynDialog();
void CreateParamDialog();
void CreateWavList();
void CreateInputDialog();
void CreateFileSB();
void CreateWarning();
void CreateOops();

void inputrec();
void setrec();
void listrec();
void donerec();
void setparam(); 
void inputparams();
void dolist();
void doneparam();

void setms();
void writedata();
void dowritedata();
d548 1
a548 2
void activateMenuItem(XSPECTRO *spectro, char accelerator);
void deActivateMenuItem(XSPECTRO *spectro, char accelerator);
a549 2
void xklPlay(XSPECTRO *spectro, int window);
void xklRecord(XSPECTRO *spectro);
d555 1
@


1.3
log
@Changed waveio.h to wavio.h.
@
text
@d1 2
d10 1
d12 2
a13 2
#define VERSION "2.4"    /* xkl version */
#define DATE "11/25/97"   /* Date released */
d130 2
a131 2
        int nfr[1024];	        /* Center freq (Hz) of output filters */
        int savnfr[1024];	/* Center freq (Hz) of output filters */
d162 2
a163 2
        float hamm[514];
        float dftmag[1028];
d339 1
d342 1
d345 1
d350 1
a358 1

d363 2
a364 2
    float real;
    float imag;
d368 2
a369 2
   XSPECTRO **list;
   int count;
d372 1
a372 1
extern ALLSPECTROS allspectros; /* global list of all waves */
a387 197
static String help_string[] = {
"FIRST TIME XKL USER:\n",
"      This help does not contain a description of each of\n",
"the xkl commands.  We hope that most of the menu entries are\n", 
"straightforward.  After reading this help file, you might want to\n",
"go through the menus and select each item in order to become familiar\n",
"with all of the commands. \n\n", 
"      When using xkl it is possible to overwrite .wav\n",
"data so make sure your data is appropriately backed up.\n\n",
"MOUSE BUTTONS:\n",
"      Left mouse button moves the time cursor.\n",
"      Middle mouse button plays waveform.\n",
"      Right mouse button raises all windows associated with waveform.\n",
"NOTE: The time cursor aligns on an actual sample.\n\n",
"      The waveform amplitude is the 16 bit value \n",
"      stored in the .wav file / 32767.0 * 9997.56 \n\n",
"GENERAL INFO:\n",
"	The xkl program displays information about a given waveform\n",
" in as many as four graphics windows, and is capable of displaying\n",
" several different waveforms at once.  Each waveform has its own spectrum\n",
" and spectrogram windows, and two waveform windows.\n\n",
"	Each of the graphics windows reacts to\n", 
"user input it receives when it has the focus of attention (The program\n",
"indicates which window is active by changing the border color).\n",
" NOTE: Pointer mode makes it difficult to use the keyboard only.\n",
"  The pointer location overrides other types of window selection.\n",
"	The text window does not accept any commands.  Note that\n",
"it does not have any menus.  It is there to provide the user\n",
"with a history of the actions taken in the program.  Text from the\n",
"can be pasted into an input popup window.\n\n",
"	Although each of the graphics windows handles its own\n",
"input through its menus, much of the time this will be transparent to\n",
"the user through the use of accelerators and because many of the\n",
"windows respond in the same way to a menu selection.  An accelerator is\n",
"a single character associated with a menu item that has the effect of\n",
"selecting that entry from a menu when it is entered from the keyboard\n",
"There is no need to pull down the menu.  If any one of the four\n",
"graphics waveform windows has the focus of attention and the user enters\n",
"'t', an popup window appears and the user is expected to enter a time\n",
"in ms.  Until the user enters a time or chooses cancel, all of the xkl\n",
"windows except the text window (and of course the popup) do not process\n",
"any user requests.  Holding down the ALT key while pressing the first\n", 
"(lower case) letter of the menu brings down that menu\n",
"so it can be read.\n\n",  
"     There are some menu items that behave differently depending\n",
"on which window is active.  For example, saving a full-page image of a\n",
"window to a postscript file requires that that window has the focus\n",
"of attention when the command is invoked. \n\n",
"     The commands G, g, and H open global files in which data\n",
"from any waveform can be stored.  The character `*' stores a full-page\n",
"image of a window into a file opened by `G', `#' stores spectra four-to-\n",
"a page in a file opened by `g', and `h' stores spectrum or waveform\n",
"amplitude data in a file opened with the `H' command\n\n",
"	 When either play is selected from the Commands window (the \n",
"accelerator is 'p') or the middle mouse button is pushed, the selected\n",
"region of the waveform is played.  `P' plays the entire waveform. \n\n",
"DISPLAYING SPECTRA FROM TWO DIFFERENT FILES IN SAME WINDOW:\n\n",
"	The xkl program has a spectrum window for each waveform so\n",
"so at present the display of spectra from two different files in the\n",
"same spectrum window is handled differently than it is in KLspec.  \n",
"The user can write a spectrum file ('z'), which is an ascii file of the\n",
"values of the smoothed spectrum in the spectrum window.  The user can then\n",
"use 'Z' to read this file into xkl and display it in the spectrum window\n", 
"of another waveform for comparison.  This feature is only available\n",
"in `s' or  `smoothed spectrum' mode.\n\n",
"WINDOW SIZES and LOCATIONS:\n",
"      If you want to change the default window locations copy the\n",
"following into your .Xdefaults file (don't forget to run xrdb) :\n\n",
"      !large waveform window\n",
"      xkl*window_0.x: 10\n",
"      xkl*window_0.y: 20\n",
"      xkl*window_0.width: 1000\n",
"      xkl*window_0.height: 230\n\n",
"      !small waveform window\n", 
"      xkl*window_1.x: 500\n",
"      xkl*window_1.y: 300\n",
"      xkl*window_1.width: 465\n",
"      xkl*window_1.height: 255\n\n",
"      !spectrogram\n", 
"      !size determined by ms\n",
"      xkl*window_2.x: 500\n",
"      xkl*window_2.y: 590\n\n",
"      !spectrum\n",
"      xkl*window_3.x: 10\n",
"      xkl*window_3.y: 500\n",
"      xkl*window_3.width: 450\n",
"      xkl*window_3.height: 355\n\n",
"      xkl*xkl_textwindow.x: 25\n",
"      xkl*xkl_textwindow.y: 300\n",
"      xkl*xkl_textwindow.width: 400\n",
"      xkl*xkl_textwindow.height: 160\n\n",
"      xkl*syn.x: 25\n",
"      xkl*syn.y: 475\n\n",
"      xkl*syngraph.x: 500\n",
"      xkl*syngraph.y: 275\n\n",
"SGI USERS:\n",
"	You might want to include:\n",
"         4Dwm*interactivePlacement: False\n",
"         4Dwm*iconAutoPlace: True\n",
"         4Dwm*iconPlacement: bottom right\n",
"in your .Xdefaults so the windows are placed automatically\n",
"and the icons are placed in the lower right.\n",
"You'll have to restart your session for this to take effect.\n\n",
"COPYING FROM F+BW WINDOW:\n",
"       The 'O' command writes to the screen and not to a file\n",
"but it is easy to cut and paste the information into a file,\n",
"especially with version 19.19 of emacs.  Use kill-rectangle and\n",
"yank-rectangle in emacs if you need to rearrange the columns.\n\n",
"THE PARAMETERS WINDOW:\n",
	"When the user selects 'Change param. value' from the Options\n",
"menu(`C') a window with a list of the parameters pops up.  There are three\n",
"ways to select the parameter that you want to change.  If you click\n",
"with the right mouse button on an entry in the list (motif will highlight\n",
"it for you) and click on change, the input popup will appear and you can\n", 
"change the value.  Double clicking on a list entry eliminates the need\n",
"for clicking on `change'.  You can also choose the parameter you want to\n",
"change by typing the single character associated with the parameter\n",
"in the 'SYM' column.\n\n",
"THE INPUT POPUP:\n\n",
"	This little window pops up when the xkl program wants\n",
"input from the user.  You may use the tab and arrow keys to move\n",
"the focus from the buttons to the text area.  This applies to the\n",
"file browser as well.  Tab moves to a different part of the window,\n",
"for example from the text part to the button part and the arrow keys\n",
"move the focus to the different buttons.  Of course clicking with the\n",
"mouse moves focus as well.  You might want to enter your\n",
"new value by just hitting return in the text area.  This will\n", 
"leave text area selected so next time you use the input popup\n",
"the text area is already selected and you can just start typing.\n\n",
"NOTE: the input popup stops all activity in the graphics windows\n",
"until you enter a value or cancel.  You may cut and paste from the\n",
"xkl textwindow and clicking in the textwindow raises the input popup\n",
"should it become buried under other windows.\n\n",
"THE .GRAM FILES:\n\n",
"	The xkl program has a format for storing the spectrogram\n",
"information in what is basically an image file.  The idea is to not\n",
"recalculate the dfts.  How this is handled in the future may\n",
"change but for now, a .gram file is written automatically if the user\n",
"chooses to display a spectrogram.  Next time you look at spectrogram\n",
"of that file there's no waiting.  WARNING: (the .gram files are written\n",
"in the directory where xkl is run since the data directories may \n",
"be protected so the case could exist where /usr/john/data.wav and\n",
"/usr/dave/data.wav try to read the same data.gram file.  The solution\n",
"is to copy one of the .wav files and rename it.)  There is a command line \n",
"option to create several of these .gram files before you start a session.\n",
"For example type 'nice -20 xkl *.wav -g' (* only expands properly in UNIX)\n",
"and go for coffee.  All the spectrograms will be calculated before\n",
"you begin your session with xkl( you might want to make use of the\n",
"xkl defs file to change the intensity of the spectrogram ).  The defs file\n",
"must be named xkl_defs.dat and be in the directory that you run xkl from.\n",
"It is suggested that you change just the white and dark gray thresholds.\n",
"This file affects the SPECTROGRAM ONLY.\n",
"Cut and paste the following into a file called ' xkl_defs.dat ':\n\n",
"6.4     window in ms(padded with zeros for fft), default:6.4ms\n",
"128	number of samples in each fft(16,32,64,128,256,512), default:128\n",
"3	number of ffts averaged, default: 3\n",
"1.0   number of ms that each fft is offset from the previous one,default:1\n",
"700.0  total number of ms displayed in spectrogram, default:1300.0\n", 
"5.0     magnitudes < this mapped to white, default:5.0\n",
"25.0    magnitudes > this mapped to darkest gray, default:25.0\n",
"1       scale size of spectrogram(1 or 2), default:1 \n",
"100     0 = no pre-emphasis  100 = exact first difference, default:100\n",
"0       0 = x axis in milliseconds, 1 = x axis in seconds, default:0\n\n",
" A LARGER SPECTROGRAM for .ps files: you can 'set number of ffts averaged' to\n",
"1 or 2. This will make a spectrogram that is higher resolution for printing\n",
"however it will take several minutes to print(lspecto prints faster.)\n\n", 
"WARNING:\n",
"Periodically you'll need to do some house cleaning and remove .gram files\n",
"that are no longer used.  You may use rm -i *.gram with impunity since\n",
"the data is safely stored in the .wav files and the .gram file can\n",
"be easily recalculated.  If you want to save the .gram files for awhile\n",
"use the compress utility.\n\n" ,
"ATTENTION:\n",
"If you edit a .wav file remove its .gram file so a new one will be \n",
"calculated or use the 'K' command to recalculate.\n\n",
"THE .PARAMS FILES:\n",
"     It is possible to store all the parameter values that you\n",
"can access with the 'C' command in a file and read them in\n",
"during another session.  The commands are 'm' to store the values\n",
"in a file and 'M' to retrieve them.  It is NOT RECOMMENDED that you\n",
"edit this file but rather write out a new one from the program where\n",
"the parameter values are checked against a valid range. \n",
"IMPORTANT NOTE: these parameters do not affect the spectrogram\n\n",
"OTHER KLATT TOOL PROGRAMS: lspecto, concat, syn, rawtowav. Type\n",
"program name with no arguments for usage.\n\n",
"DISPLAY F0:  Use lspecto -syn on the .wav file first, use the\n",
"synthesizer with that .doc file, then 'd' (time function F0) for a graph\n\n",
"SD TO WAV: It's hard to be sure what format an sd file is in but in\n",
"most cases this should work.  Running on a little endian machine like\n",
"lexic use:   sfconvert -o SHORT file.sd file.temp\n",
"             bhd file.temp file.raw\n",
"             rawtowav file.raw file sampling_rate\n",
"             rm -f file.temp file.raw\n"
};



d402 1
d514 3
@


1.2
log
@Changed AVGLIMIT, the max number of spectra used in 'A', to 100.
@
text
@d7 1
a7 1
#include "waveio.h"
@


1.1
log
@Initial revision
@
text
@d71 1
a71 1
#define AVGLIMIT 10 /* max number of spectra used in 'A' */
@
